__NUXT_JSONP__("/zh-hant/conference/talk/358", (function(a,b){b.id=358;b.begin_time="2025-09-06T05:20:00Z";b.end_time="2025-09-06T05:50:00Z";b.is_remote=false;b.location="6-r2";b.youtube_id=a;b.title="How to write an easy to use, interactive physics\u002Fscience\u002Fengineering simulator leveraging ctypes, numba, tkinter and scipy.ndimage + PIL";b.category="SCI";b.language="ZHEN";b.python_level="EXPERIENCED";b.recording_policy=true;b.abstract="Python gives so many powerful, easy-to-use libraries, it should be easy to build simulator software for our physics or other sciences or engineering simulations using basic coding skill. But it may seem too hard or time-consuming to try. That's a shame! Instead we pay lots of money and become addicted to powerful, expensive simulation software that mostly does what we don't need and not quite what we do. So I'll tell my story of how I wrote a skeleton script for the equations of my problem, wrapped a GUI around it with tkinter, and made the numpy math (and therefore response) much, much faster by using the @jit compiler effectively and correctly. For those operations I couldn't easily cast as numpy array manipulations, I'll show how I put my \"loopy\", branching bits into C++ and linked with ctypes. Finally, since my data involves images, I'll show how numpy methods, scipy.ndimage and PIL provides a wealth of processing functionality.";b.detailed_description="My particular problem that I simulate is electron diffraction from a large number of different crystal facets from a faceted crystal surface. While I did not cover this in the abstract, I have broken the problem down into a series of classes. Beam, Sample, and Screen instances are all linked to a single Experiment object, but each sample instance is built from a collection of crystal Facet objects, each with its own surface reciprocal vectors and normal. Calculating the interaction of the beam with all of these facets, keeping track of which diffracted beams hit the screen instance and where is the \"loopy\", branching and numerically complex aspect that I speed up using @jit and ctypes so that the image of the screen simulation updates immediately in response to the slider and button objects in my GUI.";b.slide_link=a;b.slido_embed_link=a;b.hackmd_embed_link=a;b.speakers=[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fstatic\u002Fimages\u002Fdefault_head.png",name:"黃亭皓",github_profile_url:a,twitter_profile_url:a,facebook_profile_url:a,bio:"目前就讀清華大學物理系碩士班，研究表面物理相關實驗，會用python進行模擬計算。"}];b.event_type="talk";return {data:[{speechData:b}],fetch:{},mutations:[["setSpeechData",b]]}}("",{})));