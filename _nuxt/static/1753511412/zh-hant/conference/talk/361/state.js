window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1753511412",layout:"default",error:d,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:361,begin_time:"2025-09-06T06:15:00Z",end_time:"2025-09-06T06:45:00Z",is_remote:c,location:"4-r0",youtube_id:b,title:"Automate the External Boring Stuff with Python: Exploring Model Context Protocol (MCP)",category:"TOOL",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:a,abstract:"This talk provides a Step-by-step Guide to the Model Context Protocol (MCP) proposed by Anthropic, a rapidly evolving standard for letting LLMs access external services and resources. We will demonstrate how Python developers can quickly build MCP servers using tools like FastMCP or the official Python SDK. We will focus on a showcase demo that guides you from @mcp.tool registration to a live LLM invocation. Beyond basic setup, we'll discuss key considerations and best practices for building MCP integrations. We will also explore real-world OSS examples such as browser automation via Playwright. After this talk, you‚Äôll be ready to integrate MCP-powered AI agents into your projects, with full source code provided to replicate the workflow.",detailed_description:"**Note**\r\nGiven the explosive growth in web resources and OSS for MCP, we will update the talk content to reflect the latest trends and technical details at the time of the event. The core focus will be on providing a practical, hands-on understanding suitable for both beginners and those with existing automation experience.\r\n\r\n**Who Should Attend?**\r\n- Users who have heard the buzz about MCP but aren‚Äôt quite sure what its all about\r\n- Anyone wanting to set up an MCP server with minimal code and integrate it with LLMs\r\n- Those already using external services or OSS like Playwright or Figma and are interested in trying MCP\r\n- Python developers considering best practices for integrating LLM capabilities into existing applications or building more sophisticated AI agents.\r\n\r\n**What is MCP?** (Ref: [Anthropic Official Docs](https:\u002F\u002Fdocs.anthropic.com\u002Fen\u002Fdocs\u002Fagents-and-tools\u002Fmcp))\r\n- We‚Äôll outline the challenges of previous LLM-to-external integrations‚ÄîRAG, custom APIs, plugins‚Äîand explain MCP‚Äôs background, its core design philosophy, and benefits. We‚Äôll focus on its significance as an open standard, the client-server architecture, and the distinction between ‚Äútools‚Äù and ‚Äúresources‚Äù to provide a code-based image of how it all fits together.\r\n- We‚Äôll briefly mention core protocol specifications from the official docs, focusing on aspects relevant to practical implementation and extensibility.\r\n- We‚Äôll limit ourselves to essential explanations like, ‚ÄúUse a client-server format and register tools (@mcp.tool) and resources (@mcp.resource).‚Äù\r\n- We will also briefly cover the differences and typical use cases for communication modes like SSE (Server-Sent Events) and STDIO, discussing their trade-offs.\r\n\r\n**Python MCP Server Implementation Demo (Ref: fastmcp & python-sdk)**\r\n- This section will be a core part of the talk, focusing on a step-by-step walkthrough.\r\n- All source code for the showcased demos will be made available in a public repository for attendees to clone and run immediately.\r\n- For those looking to integrate MCP into existing systems, we will highlight architectural considerations and patterns.\r\n- We‚Äôll demonstrate the steps to register tools with minimal code using libraries like FastMCP, showing actual usage of decorators like @mcp.tool() and @mcp.resource(). We will also discuss best practices for tool design, such as clear naming, appropriate granularity, and basic error handling within tools.\r\n- We‚Äôll provide an explicit example using [jlowin\u002Ffastmcp](https:\u002F\u002Fgithub.com\u002Fjlowin\u002Ffastmcp), walking through requirements.txt ‚Üí pip install ‚Üí defining @mcp.tool() ‚Üí python main.py.\r\n- We‚Äôll then introduce the [modelcontextprotocol\u002Fpython-sdk](https:\u002F\u002Fgithub.com\u002Fmodelcontextprotocol\u002Fpython-sdk) to show how only a few lines of code can invoke tools over HTTP, with console output to confirm.\r\n\r\n**Showcasing OSS Examples: Practical Applications and Design Insights (We will select one or two key examples for in-depth demonstration based on impact and clarity):**\r\n\r\n- Example Focus: We will select one or two impactful examples (e.g., [microsoft\u002Fplaywright-mcp](https:\u002F\u002Fgithub.com\u002Fmicrosoft\u002Fplaywright-mcp)) to demonstrate a complete workflow: setting up the MCP server, registering tools\u002Fresources, and invoking them from an LLM. Beyond the \"how-to\", we will analyze these examples for design patterns and advanced application possibilities relevant to experienced developers.\r\n\r\n**Introducing OSS Examples** (we plan to showcase as many as possible):\r\n- [**microsoft\u002Fplaywright-mcp**](https:\u002F\u002Fgithub.com\u002Fmicrosoft\u002Fplaywright-mcp): Demonstrates publishing browser operations via an MCP server. We‚Äôll show folder structures, sample commands, and how Playwright handles page actions.\r\n- [**GLips\u002FFigma-Context-MCP**](https:\u002F\u002Fgithub.com\u002FGLips\u002FFigma-Context-MCP): A server that provides Figma layout info to LLMs. We‚Äôll detail exactly which files to modify and which scripts to run to enable Figma API integration.\r\n- [**PydanticAI MCP**](https:\u002F\u002Fai.pydantic.dev\u002Fmcp\u002F): An MCP ecosystem leveraging Pydantic-based definitions. We‚Äôll highlight code fragments showing how to incorporate type definitions and validations.\r\n- [**modelcontextprotocol\u002Ftypescript-sdk**](https:\u002F\u002Fgithub.com\u002Fmodelcontextprotocol\u002Ftypescript-sdk): Even though this talk is aimed at Python users, we‚Äôll spotlight the TypeScript SDK to emphasize MCP‚Äôs broad cross-language adoption.\r\n\r\n**References**\r\n- [Model Context Protocol (MCP) - Anthropic](https:\u002F\u002Fdocs.anthropic.com\u002Fen\u002Fdocs\u002Fagents-and-tools\u002Fmcp)\r\n- [jlowin\u002Ffastmcp: The fast, Pythonic way to build Model Context Protocol servers üöÄ](https:\u002F\u002Fgithub.com\u002Fjlowin\u002Ffastmcp)\r\n- [Model Context Protocol (MCP) - PydanticAI](https:\u002F\u002Fai.pydantic.dev\u002Fmcp\u002F)\r\n- [microsoft\u002Fplaywright-mcp: Playwright MCP server](https:\u002F\u002Fgithub.com\u002Fmicrosoft\u002Fplaywright-mcp)\r\n- [GLips\u002FFigma-Context-MCP: MCP server to provide Figma layout information to AI coding agents like Cursor](https:\u002F\u002Fgithub.com\u002FGLips\u002FFigma-Context-MCP)\r\n- [modelcontextprotocol\u002Fpython-sdk: The official Python SDK for Model Context Protocol servers and clients](https:\u002F\u002Fgithub.com\u002Fmodelcontextprotocol\u002Fpython-sdk)\r\n- [modelcontextprotocol\u002Ftypescript-sdk: The official Typescript SDK for Model Context Protocol servers and clients](https:\u002F\u002Fgithub.com\u002Fmodelcontextprotocol\u002Ftypescript-sdk)\r\n- [punkpeye\u002Fawesome-mcp-clients: A collection of MCP clients.](https:\u002F\u002Fgithub.com\u002Fpunkpeye\u002Fawesome-mcp-clients)",slide_link:b,slido_embed_link:b,hackmd_embed_link:b,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002Fb5\u002F20\u002Fb5209e524d55fd5982d6f0ca7cf8b8fd.jpg",name:"Ryosuke Tanno",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fnegi111111",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Fnegi111111",facebook_profile_url:b,bio:"He is a Research Engineer at a telecommunications company in Japan, specializing in developing web applications for data analysis. He is actively involved in the development of ‚ÄúNode-AI‚Äù (https:\u002F\u002Fnodeai.io\u002F), a no-code AI development tool designed for time-series data analysis."}],event_type:"talk"},relatedData:[],reviewerData:[],configs:{conferenceName:"PyCon TW",conferenceYear:"2025",conferenceDate:"2025-09-06",showAboutStaffPage:c,showConferencePage:a,showSchedulePage:a,showEventOverviewPage:a,showEventsPage:a,showIndexSecondaryBtn:a,showIndexSponsorSection:c,showProposalSystemPage:a,showRegistrationPage:a,showSpeakingPage:a,showSponsorPage:a,showVenuePage:c,aboutHideItems:["apacCommunity"],conferenceHideItems:[],eventsHideItems:["jobs"],registrationHideItems:[],venueHideItems:["venueInfo","accommodation"]},i18n:{routeParams:{}}},serverRendered:a,routePath:"\u002Fzh-hant\u002Fconference\u002Ftalk\u002F361",config:{http:{browserBaseURL:"https:\u002F\u002Fstaging.pycon.tw\u002Fprs"},gtm:{id:"GTM-TNZ39PD"},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:d}}}}(true,"",false,null));