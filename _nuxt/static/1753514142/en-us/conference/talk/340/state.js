window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1753514142",layout:"default",error:d,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:340,begin_time:"2025-09-06T05:20:00Z",end_time:"2025-09-06T05:50:00Z",is_remote:b,location:"1-r3",youtube_id:c,title:"AST Black Magic: Run synchronous Python code on asynchronous Pyodide",category:"CORE",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:a,abstract:"The `ast` module allows you to manipulate the AST (Abstract Syntax Tree) and change the behavior of the code at runtime.\r\n\r\nI would like to introduce it with an interesting use case on Pyodide, a Python distribution for the browser. Pyodide has some differences from the CPython due to its asynchronous nature, so the code that works on CPython may not work on Pyodide. For example, `time.sleep()` does not work on Pyodide and you need to use `await asyncio.sleep()` instead.\r\n\r\nHowever, you may want to run the code written for CPython on Pyodide for interoperability.\r\nIn such a case, you can modify the AST to make it work on Pyodide without rewriting the source code.\r\n\r\nIn this talk, I will explain the AST manipulation with the `ast` module.\r\nThen I will share some practical examples that I actually implemented in my Pyodide-based project to run CPython-targeted code.\r\nThey should have insights about how to use the `ast` module to solve some problems with actual examples.",detailed_description:"I will introduce the `ast` module and how powerful the AST manipulation is by sharing my actual experience on [Pyodide](https:\u002F\u002Fpyodide.org\u002Fen\u002Fstable\u002F).\r\n\r\nPyodide is a Python distribution that runs in the browser, and it has some limitations as follows:\r\n* `time.sleep()` uses a busy-wait and sometimes doesn't work as expected for example with `yield`\r\n* `asyncio.run()` raises an error\r\n\r\nSo for better interoperability, the following code changes are needed:\r\n* `time.sleep()` -\u003E `await asyncio.sleep()`\r\n* `asyncio.run(fn())` -\u003E `await fn()`\r\n\r\nAnd if a function `fn` contains such method calls, the function definition must be changed to `async def fn()` because they are transformed to be `await`ed as above, so `fn()` must be changed to `await fn()` then.\r\n\r\n* `def fn()` -\u003E `async def fn()`\r\n* `fn()` -\u003E `await fn()`\r\n* `mod.fn()` -\u003E `await mod.fn()`\r\n\r\nI actually implemented these code changes as AST transformations in my project, [Stlite](https:\u002F\u002Fgithub.com\u002Fwhitphx\u002Fstlite), which has a kind of a script runner that can run CPython-targeted code on Pyodide.\r\n\r\nIts AST transformation code is available at https:\u002F\u002Fgithub.com\u002Fwhitphx\u002Fstlite\u002Fblob\u002Fmain\u002Fpackages\u002Fkernel\u002Fpy\u002Fstlite-lib\u002Fstlite_lib\u002Fcodemod.py. It's very complicated so I will break it down and pick up some important parts in this talk to make the essential parts clear.\r\n\r\nPyodide project is being improved with new browser features and these problems should be removed when [WebAssembly JavaScript Promise Integration (JSPI)](https:\u002F\u002Fdeveloper.chrome.com\u002Fblog\u002Fwebassembly-jspi-origin-trial) is available, but these contents will still be useful to understand the practical use cases of the AST manipulation.",slide_link:c,slido_embed_link:c,hackmd_embed_link:c,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002Ff1\u002Fd5\u002Ff1d577cd524fba9788aa2fad18925304.jpg",name:"Yuichiro Tachibana",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fwhitphx",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Fwhitphx",facebook_profile_url:"https:\u002F\u002Fwww.facebook.com\u002Fytsuchiya2\u002F",bio:"Yuichiro is a professional software developer with a deep passion for open-source software. After contributing to software product development across several machine learning startups, he joined Hugging Face in 2023.\r\nHe is developing and maintaining several OSS projects, including Stlite, Gradid-Lite, and Transformers.js.py."}],event_type:"talk"},relatedData:[],reviewerData:[],configs:{conferenceName:"PyCon TW",conferenceYear:"2025",conferenceDate:"2025-09-06",showAboutStaffPage:b,showConferencePage:a,showSchedulePage:a,showEventOverviewPage:a,showEventsPage:a,showIndexSecondaryBtn:a,showIndexSponsorSection:b,showProposalSystemPage:a,showRegistrationPage:a,showSpeakingPage:a,showSponsorPage:a,showVenuePage:b,aboutHideItems:["apacCommunity"],conferenceHideItems:[],eventsHideItems:["jobs"],registrationHideItems:[],venueHideItems:["venueInfo","accommodation"]},i18n:{routeParams:{}}},serverRendered:a,routePath:"\u002Fen-us\u002Fconference\u002Ftalk\u002F340",config:{http:{browserBaseURL:"https:\u002F\u002Fstaging.pycon.tw\u002Fprs"},gtm:{id:"GTM-TNZ39PD"},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:d}}}}(true,false,"",null));