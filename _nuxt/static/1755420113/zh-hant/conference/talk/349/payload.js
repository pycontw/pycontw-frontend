__NUXT_JSONP__("/zh-hant/conference/talk/349", (function(a,b){b.id=349;b.begin_time="2025-09-06T06:00:00Z";b.end_time="2025-09-06T06:30:00Z";b.is_remote=false;b.location="1-r3";b.youtube_id=a;b.title="Python FFI 的陰暗角落";b.category="CORE";b.language="ZHEN";b.python_level="EXPERIENCED";b.recording_policy=true;b.abstract="Python 作為現今程式語言排行榜上的扛壩子，在龐大生態系統的背後，究竟是如何與其他程式語言進行溝通？本次議程將深入探討 Python 與其他語言間互動的底層運作機制，並解析設計過程中所面臨的權衡與挑戰，涵蓋從記憶體管理到即時編譯(JIT)的多項技術考量。\r\n議程會從 CPython world 出發，涵蓋動態載入函式庫、記憶體定址、組合語言與暫存器等底層，並進一步探討 Python 3.13 實驗性功能 `--disable-gil` 在多執行緒環境下所遭遇的挑戰。進一步的議題還包括探討 Windows DLL security, glibc memory arena leak 等等的問題，藉此揭示跨語言整合過程中那些隱蔽而棘手的陰暗角落。";b.detailed_description="本次議程將透過實務經驗分享，深入探討 Python 如何在底層與其他程式語言進行有效且安全的互動，並討論在跨語言系統整合過程中可能遇到的隱蔽技術陷阱。\r\n\r\n議程將首先從 CPython 的底層設計與運作機制展開，快速回顧 CPython 在記憶體管理及動態函式庫載入（DLL\u002Fshared object）上的重要概念，並分析不同 Python FFI 技術（如 ctypes, cffi, pybind11）的效能差異及實務上面臨的挑戰。接著將深入探討 Python 3.13 中實驗性引入的 --disable-gil 功能，說明移除 GIL 的設計初衷與實現方法，並以具體實驗經驗探討在無 GIL 的多執行緒環境中所遇到的競爭條件（race conditions）與效能瓶頸，並分享最佳實務的解決方式。\r\n\r\n此外，本議程也將聚焦跨語言整合的實戰案例，分享如何針對 Windows DLL 安全漏洞進行防禦性設計，以及透過修改 CPython，成功將 Python 編譯成可於 Windows XP 執行的獨立可執行檔。這段經歷將探討 DLL 動態載入的安全性問題、CPython 的內部修改方法，以及相關效能測試結果與實務上的改良經驗。\r\n\r\n最後，本議程還將深入探討 glibc 在多執行緒環境下記憶體管理的神秘問題，例如多次重複建立 memory arena 所引發的 arena leak 與 thread locking 議題，並透過現場 gdb 示範如何追蹤與排除此類底層問題，進一步提升與會者對跨語言系統整合與底層除錯技巧的理解。\r\n\r\n本次分享期望透過實務案例的交流，幫助對跨語言系統整合與底層效能優化有深入需求的工程師，更清楚地理解實際開發過程中可能遭遇的各種複雜挑戰，進而有效提升相關技術的應用與掌握能力。\r\n\r\n[Python FFI with ctypes and cffi](https:\u002F\u002Feli.thegreenplace.net\u002F2013\u002F03\u002F09\u002Fpython-ffi-with-ctypes-and-cffi)\r\n[Larry Hastings - Removing Python's GIL: The Gilectomy - PyCon 2016](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=P3AyI_u66Bw)\r\n[The 2021 Python Language Summit: CPython Performance Improvements at Instagram](https:\u002F\u002Fpyfound.blogspot.com\u002F2021\u002F05\u002Fthe-2021-python-language-summit-cpython.html)\r\n[PEP 703 – Making the Global Interpreter Lock Optional in CPython](https:\u002F\u002Fpeps.python.org\u002Fpep-0703\u002F)\r\n[Dynamic-Link Library Security](https:\u002F\u002Flearn.microsoft.com\u002Fen-us\u002Fwindows\u002Fwin32\u002Fdlls\u002Fdynamic-link-library-security)\r\n[SetDefaultDllDirectories](https:\u002F\u002Flearn.microsoft.com\u002Fen-us\u002Fwindows\u002Fwin32\u002Fapi\u002Flibloaderapi\u002Fnf-libloaderapi-setdefaultdlldirectories)\r\n[Hacking the CPython Interpreter | SciPy 2016 | James Powell](SciPy 2016 James Powell “Hacking the CPython Interpreter)\r\n[Removing Python's GIL: It's Happening!](https:\u002F\u002Fdeveloper.vonage.com\u002Fen\u002Fblog\u002Fremoving-pythons-gil-its-happening)\r\n[Conference Talk – Python without the GIL](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=9OOJcTp8dqE)\r\n[Arena \"leak\" in glibc](https:\u002F\u002Fcodearcana.com\u002Fposts\u002F2016\u002F07\u002F11\u002Farena-leak-in-glibc.html)";b.slide_link=a;b.slido_embed_link="https:\u002F\u002Fapp.sli.do\u002Fevent\u002FtpEoj76rR1dNJ79KxGpe2s";b.hackmd_embed_link=a;b.speakers=[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002F0c\u002Fda\u002F0cda09be910e5e625ffec82dbf9fd89c.jpg",name:"scc",github_profile_url:a,twitter_profile_url:a,facebook_profile_url:a,bio:"scc@cycraft"}];b.event_type="talk";return {data:[{speechData:b}],fetch:{},mutations:[["setSpeechData",b]]}}("",{})));