window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1753060832",layout:"default",error:d,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:363,begin_time:"2025-09-07T03:30:00Z",end_time:"2025-09-07T03:45:00Z",is_remote:c,location:"4-r0",youtube_id:b,title:"Beyond Test Scripts: Smarter Automation with Multi-Agent AI",category:"TEST",language:"ENEN",python_level:"INTERMEDIATE",recording_policy:a,abstract:"In today‚Äôs fast-paced software landscape, traditional testing methods often fall short in keeping up with evolving applications. This session introduces AI-driven Multi-Agent Systems that transform testing by making it adaptive, scalable, and intelligent.  \r\n\r\nYou‚Äôll discover how Multi-Agent Retrieval-Augmented Generation (RAG) dynamically generates test cases, enhances bug detection accuracy, and optimizes test coverage with minimal manual intervention. Through Python-based pipelines using PyTest, Selenium, and LangChain, you‚Äôll learn how to build AI-powered QA workflows that continuously learn and improve.  \r\n\r\n- Implementing Multi-Agent RAG for adaptive and self-learning test cases.  \r\n- Automating Python-based UI and regression testing with AI.  \r\n- Enhancing bug detection accuracy with machine learning models.  \r\n- Improving test coverage using intelligent agents that evolve with application changes.",detailed_description:"Traditional software testing is often rigid, slow, and manually intensive. As modern applications evolve rapidly, static test cases become outdated, leading to fragile test suites, missed edge cases, and delayed feedback cycles. This talk presents a smarter and adaptive testing approach‚Äîleveraging AI-powered Multi-Agent Systems to dynamically generate, execute, and refine tests using real-time application context.\r\n\r\nAt the core of this approach is a Multi-Agent Retrieval-Augmented Generation (RAG) architecture, where specialized agents collaborate to make software testing more intelligent and autonomous. Unlike traditional single-agent prompt-based approaches, these agents operate as modular components‚Äîone retrieves relevant app metadata and source code, another generates and prioritizes test cases, while a third evaluates runtime results using ML models to detect anomalies and bugs.\r\n\r\nUsing Python-based pipelines built with PyTest, Selenium, and LangChain, this session demonstrates how to:\r\n\r\nüîÑ Automate UI and Regression Testing\r\nLearn how agents extract UI structure and API behavior to generate end-to-end test cases on the fly, reducing the need for manually written test scripts and brittle locators.\r\n\r\nüß† Generate Adaptive Test Cases with LLMs\r\nExplore how LangChain-based LLM agents can synthesize PyTest test cases from requirements, component trees, or API schemas, adjusting in real time as your codebase evolves.\r\n\r\nüêû Detect Bugs Using Machine Learning Models\r\nDiscover how runtime test results are analyzed using anomaly detection or classification models to automatically flag performance bottlenecks, logic errors, or hidden failures that would escape rule-based checks.\r\n\r\nüìà Optimize Test Coverage\r\nUnderstand how reinforcement learning or scoring heuristics can be used by agents to select high-impact paths, edge cases, or under-tested components‚Äîenhancing test suite effectiveness.\r\n\r\n‚úÖ Why It Matters\r\nThis AI-powered system transforms software testing from a static, reactive process into an adaptive, self-improving pipeline. It dramatically reduces the manual workload for QA engineers, improves bug detection accuracy, and ensures tests evolve as the application changes‚Äîessential for CI\u002FCD and agile development.\r\n\r\nFor teams scaling rapidly or dealing with highly dynamic products, this approach ensures:\r\n\r\nFaster test cycles with fewer false positives\r\n\r\nMore resilient regression suites\r\n\r\nBetter fault coverage through ML-driven insights\r\n\r\nCost-effective QA as test generation and execution scale with little human effort\r\n\r\nüéØ Who Should Attend\r\nThis talk is ideal for:\r\n\r\nPython developers looking to integrate GenAI into their CI\u002FCD test pipelines\r\n\r\nQA engineers and SDETs interested in modernizing automation frameworks with AI\r\n\r\nTest architects and DevOps engineers aiming to make their QA stack intelligent and scalable\r\n\r\nAttendees will leave with a clear roadmap and reference architecture to start building their own AI-powered, multi-agent test automation systems‚Äîunlocking the future of smart, resilient software testing.",slide_link:b,slido_embed_link:b,hackmd_embed_link:b,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fstatic\u002Fimages\u002Fdefault_head.png",name:"Sneha Mavuri",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fsneha24102000",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002Fsnehanomics",facebook_profile_url:b,bio:"Sneha is a software engineer with two years of experience, currently working at Swiggy in the Vendor Engineering department, specializing in quality assurance and automation testing. She has previously worked at CloudDefense.AI, Morgan Stanley, and Wingify, gaining expertise in software development and cloud security. Beyond engineering, she is an active content creator on LinkedIn, simplifying tech concepts and sharing career insights to make technology more accessible."}],event_type:"talk"},relatedData:[],reviewerData:[],configs:{conferenceName:"PyCon TW",conferenceYear:"2025",conferenceDate:"2025-09-06",showAboutStaffPage:c,showConferencePage:a,showSchedulePage:a,showEventOverviewPage:a,showEventsPage:a,showIndexSecondaryBtn:a,showIndexSponsorSection:c,showProposalSystemPage:a,showRegistrationPage:a,showSpeakingPage:a,showSponsorPage:a,showVenuePage:c,aboutHideItems:["apacCommunity"],conferenceHideItems:["panelDiscussion"],eventsHideItems:["openSpaces","jobs"],registrationHideItems:[],venueHideItems:["venueInfo","accommodation"]},i18n:{routeParams:{}}},serverRendered:a,routePath:"\u002Fen-us\u002Fconference\u002Ftalk\u002F363",config:{http:{browserBaseURL:"https:\u002F\u002Fstaging.pycon.tw\u002Fprs"},gtm:{id:"GTM-TNZ39PD"},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:d}}}}(true,"",false,null));