window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002Fpycontw-frontend\u002F_nuxt\u002Fstatic\u002F1756039899",layout:"default",error:d,state:{sponsorsData:[],jobsData:[],schedulesData:[],keynotesData:[],youtubeInfo:[],speechesData:[],speechData:{id:332,begin_time:"2025-09-07T06:15:00Z",end_time:"2025-09-07T07:00:00Z",is_remote:b,location:"1-r3",youtube_id:c,title:"Practical Python Malware Analysis",category:"SEC",language:"ZHEN",python_level:"INTERMEDIATE",recording_policy:a,abstract:"Python is a widely used programming language for development, but its flexibility makes it a popular choice for malware authors. Malware authors abuse Python's built-in functions, standard libraries, and PyInstaller to create obfuscated malware that evades detection, posing a growing threat to the software supply chain.\r\n\r\nIn this talk, we will explore the inner workings of Python malware, how malware authors obfuscate code, conceal payloads, and leverage PyInstaller to distribute standalone executables. Attendees will have hands-on experience in reverse-engineering PyInstaller-packed malware, applying static and dynamic analysis techniques, and leveraging online sandbox services for behavioral analysis.\r\n\r\nWe will also dive into real-world Python malware families, breaking down their techniques and evasion tactics. By the end of this talk, attendees will gain practical skills for detecting, dissecting, and mitigating Python-based malware threats.",detailed_description:"Python's flexibility and ease of use have made it a popular choice for legitimate developers and malware authors. One increasingly common attack vector involves malicious Python packages distributed through the Python Package Index (PyPI) and installed via pip. Malware authors often embed harmful code within the setup.py file, allowing the malware to hide its malicious intentions when unsuspecting users install what appears to be a legitimate package.\r\n\r\nThis presentation will explore how these supply chain attacks work, analyze real-world malware samples, and demonstrate effective detection and mitigation strategies.\r\n\r\nAdditionally, we will discuss common obfuscation techniques employed in Python malware, such as exec, eval, marshal, pickle, base64, zlib, ctypes, and PyInstaller. These techniques enable malware authors to conceal and dynamically execute malicious code, making traditional detection methods less effective.\r\n\r\nMoving forward, we will focus on the PyInstaller, a tool commonly used to package Python scripts into standalone executables, complicating analysis and reverse engineering. This talk will include strategies to defeat these obfuscation techniques and extract the underlying malicious code.\r\n\r\n**Common Techniques Used in Python Malware**\r\n\r\n* exec & eval (Dynamic Code Execution)\r\nUsage: malware authors often store malicious payloads as encoded strings and execute them at runtime to evade detection.\r\n\r\n* base64 (Encoding Malicious Code to Evade Detection)\r\nUsage: Malware authors encode payloads in base64 to make them less readable and avoid static detection.\r\n\r\n* xor (Simple Encryption for Obfuscation)\r\nUsage: Malware authors use XOR encryption to obfuscate data, payloads, or commands, making them harder to detect during static analysis. Itâ€™s a simple encryption technique that hides malicious code, which is decrypted at runtime.\r\n\r\n* zlib (Compression for Obfuscation)\r\nUsage: malware authors use zlib compression to further obfuscate encoded payloads.\r\n\r\n**Hands-on Analysis and Reverse Engineering for malware packed with PyInstaller**\r\n\r\nTo provide a hands-on learning experience, we will walk through the reverse engineering process for PyInstaller-packed malware. Attendees will learn how to:\r\n\r\n1. Analyze and identify whether the binaries are packed with PyInstaller.\r\n1. Unpack PyInstaller binaries using [pyinstxtractor.py](https:\u002F\u002Fgithub.com\u002Fextremecoders-re\u002Fpyinstxtractor) to extract hidden Python code.\r\n1. Decompile .pyc files with tools like [pycdc](https:\u002F\u002Fgithub.com\u002Fzrax\u002Fpycdc) and [PyLingual](https:\u002F\u002Fpylingual.io\u002F) to recover the original source code.\r\n1. Analyze static properties of the extracted code to identify obfuscation patterns and malicious functionality.\r\n1. Leverage free online services like [Triage Sandbox](https:\u002F\u002Ftria.ge\u002F) to analyze malware behavior and detect indicators of compromise.\r\n1. Building on these foundational techniques, we will explore real-world Python malware families, dissecting their obfuscation techniques and evasion tactics. By analyzing these malware, attendees will gain insights into how malware authors operate, how malware manages to evade security vendors, and what steps can be taken to detect and mitigate these threats.\r\n\r\n\r\n**Key Takeaways**\r\n\r\nBy the end of this talk, participants will have developed a practical understanding of:\r\n\r\n* How malware authors abuse PyPI and pip to distribute malware via setup.py\r\n* How Python malware obfuscates its code\r\n* Techniques to extract and analyze malicious Python code packed with PyInstaller\r\n* Static and dynamic analysis methodologies for Python malware\r\n* Common evasion tactics used by real-world Python malware families\r\n* Best practices for detecting and mitigating Python-based malware threats\r\n* This talk is designed to be hands-on, providing both beginner and experienced analysts with the practical skills to investigate and defeat Python-based malware.",slide_link:"https:\u002F\u002Fdocs.google.com\u002Fpresentation\u002Fd\u002F1pvCbpA73rcksXC1RhtF-JU6Ld9kqw_sbCdVoQLTLldI\u002Fedit?usp=sharing",slido_embed_link:"https:\u002F\u002Fapp.sli.do\u002Fevent\u002F42nvGwCnBZvq1WzJeoq7La",hackmd_embed_link:c,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002Fcc\u002F92\u002Fcc92e06fafd13445e6a1d6468371e89a.jpg",name:"JunWei Song",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fkrnick",twitter_profile_url:"https:\u002F\u002Ftwitter.com\u002FJunWei__Song",facebook_profile_url:c,bio:"JunWei is a senior malware researcher at Recorded Future Triage Sandbox, interested in the field of reverse engineering, malware analysis, threat intelligence, and developing tools to aid malware analysis. He has been very involved in the security community, previously leading Quark-Engine and mentoring GSoC under the Honeynet Project.\r\n\r\nOutside of work, he volunteers for the PyCon TW community, has been a member of the Review Board since 2020, and served as the PyCon APAC 2022 Program Chair. He is passionate about contributing to the community and helping to organize the PyCon Taiwan program committee.\r\n\r\nHe also enjoys sharing his security and malware research through talks. He has presented at various security conferences, such as Black Hat Asia, DEFCON BTV, Virus Bulletin, HITB, and ROOTCON."}],event_type:"talk"},relatedData:[],reviewerData:[],configs:{conferenceName:"PyCon TW",conferenceYear:"2025",conferenceDate:"2025-09-06",showAboutStaffPage:b,showConferencePage:a,showSchedulePage:a,showEventOverviewPage:a,showEventsPage:a,showIndexSecondaryBtn:a,showIndexSponsorSection:a,showProposalSystemPage:a,showRegistrationPage:a,showSpeakingPage:b,showSponsorPage:a,showVenuePage:a,aboutHideItems:["apacCommunity"],conferenceHideItems:[],eventsHideItems:[],registrationHideItems:[],venueHideItems:["accommodation"]},i18n:{routeParams:{}}},serverRendered:a,routePath:"\u002Fen-us\u002Fconference\u002Ftalk\u002F332",config:{http:{browserBaseURL:"https:\u002F\u002Fstaging.pycon.tw\u002Fprs"},gtm:{id:"GTM-TNZ39PD"},_app:{basePath:"\u002Fpycontw-frontend\u002F",assetsPath:"\u002Fpycontw-frontend\u002F_nuxt\u002F",cdnURL:d}}}}(true,false,"",null));