__NUXT_JSONP__("/conference/talk/352", (function(a,b){return {data:[{speechData:{id:352,begin_time:b,end_time:b,is_remote:false,location:b,youtube_id:a,title:"An Introduction to the GIL for Python Beginners: Disabling It in Python 3.13 and Leveraging Concurrency",category:"CORE",language:"ENEN",python_level:"NOVICE",recording_policy:true,abstract:"In this presentation, aimed at Python beginners interested in parallel processing, we will explain the fundamental concepts of the Global Interpreter Lock (GIL) in Python and discuss its impact on programming. Specifically, we will touch upon the ability to disable the GIL in Python 3.13 and provide practical advice on how beginners can approach the GIL to achieve efficient concurrent processing.",detailed_description:"In this talk, we break down the complex concept of Python’s Global Interpreter Lock (GIL) into digestible components for those new to parallel processing in Python. We begin with an introduction to the GIL—what it is, why it exists, and how it impacts concurrency in multithreaded applications. Drawing from personal research experience in accelerating simulations via machine learning, I will illustrate the real-world challenges posed by the GIL, particularly when dealing with CPU-bound tasks.\r\n\r\nThe session will then pivot to exploring conventional methods to work around GIL limitations, such as:\r\n\r\n* Utilizing the multiprocessing module to enable process-based parallelism.\r\n* Implementing asynchronous programming with asyncio.\r\n* Leveraging third-party libraries that are designed to bypass or mitigate GIL constraints.\r\n\r\nA significant portion of the presentation is dedicated to the newly introduced option of disabling the GIL in Python 3.13—covering how this feature works, the potential performance benefits, and important compatibility and stability considerations. By integrating theoretical background with hands-on examples and best practices, the talk offers a roadmap for beginners to experiment with and implement efficient concurrent processing strategies in their Python projects. For additional clarity, references such as the Python documentation for multiprocessing and asyncio will be shared during the presentation.",slide_link:a,slido_embed_link:a,hackmd_embed_link:a,speakers:[{thumbnail_url:"https:\u002F\u002Ftw.pycon.org\u002Fprs\u002Fmedia\u002Fcache\u002F90\u002F6a\u002F906a0a74a22230753d98a98593bf829c.jpg",name:"Yu Saito",github_profile_url:"https:\u002F\u002Fgithub.com\u002Fyus04",twitter_profile_url:a,facebook_profile_url:a,bio:"Yu Saito is currently working as a Technical Specialist for Azure at Microsoft Japan. Prior to joining Microsoft, Yu was a graduate student specializing in bioinformatics. During this time, he developed machine learning models to accelerate molecular dynamics simulations. This experience sparked his interest in Python, which continues to be a key area of expertise."}],event_type:"talk"}}],fetch:{},mutations:[]}}("",null)));